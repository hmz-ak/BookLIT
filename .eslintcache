[{"C:\\express-project\\readers_club_react\\src\\index.js":"1","C:\\express-project\\readers_club_react\\src\\App.js":"2","C:\\express-project\\readers_club_react\\src\\components\\NavBar.jsx":"3","C:\\express-project\\readers_club_react\\src\\components\\auth\\Login.jsx":"4","C:\\express-project\\readers_club_react\\src\\components\\services\\UserService.jsx":"5","C:\\express-project\\readers_club_react\\src\\components\\services\\GenericService.jsx":"6","C:\\express-project\\readers_club_react\\src\\components\\auth\\Register.jsx":"7","C:\\express-project\\readers_club_react\\src\\components\\LandingPage.jsx":"8","C:\\express-project\\readers_club_react\\src\\components\\imageSlider\\ImageSlider.jsx":"9","C:\\express-project\\readers_club_react\\src\\components\\services\\NovelService.jsx":"10","C:\\express-project\\readers_club_react\\src\\components\\imageSlider\\ItemsSlider.jsx":"11","C:\\express-project\\readers_club_react\\src\\components\\TextHeading.jsx":"12","C:\\express-project\\readers_club_react\\src\\components\\Footer.jsx":"13","C:\\express-project\\readers_club_react\\src\\components\\services\\ChapterService.jsx":"14","C:\\express-project\\readers_club_react\\src\\components\\services\\GenreService.jsx":"15","C:\\express-project\\readers_club_react\\src\\components\\readers_club\\stories\\SingleNovel.jsx":"16","C:\\express-project\\readers_club_react\\src\\components\\readers_club\\stories\\NewStory.jsx":"17","C:\\express-project\\readers_club_react\\src\\components\\readers_club\\chapters\\NewChapter.jsx":"18","C:\\express-project\\readers_club_react\\src\\components\\readers_club\\chapters\\SingleChapter.jsx":"19","C:\\express-project\\readers_club_react\\src\\components\\readers_club\\chapters\\Chapters.jsx":"20","C:\\express-project\\readers_club_react\\src\\components\\readers_club\\genres\\Genre.jsx":"21","C:\\express-project\\readers_club_react\\src\\components\\readers_club\\genres\\GenreSpecificStory.jsx":"22","C:\\express-project\\readers_club_react\\src\\components\\readers_club\\libraries\\Library.jsx":"23"},{"size":219,"mtime":1608817539578,"results":"24","hashOfConfig":"25"},{"size":1741,"mtime":1609254588908,"results":"26","hashOfConfig":"25"},{"size":4293,"mtime":1609254515402,"results":"27","hashOfConfig":"25"},{"size":1828,"mtime":1608974548363,"results":"28","hashOfConfig":"25"},{"size":1166,"mtime":1609059961459,"results":"29","hashOfConfig":"25"},{"size":1451,"mtime":1609235987817,"results":"30","hashOfConfig":"25"},{"size":2094,"mtime":1608974041435,"results":"31","hashOfConfig":"25"},{"size":2780,"mtime":1609172070394,"results":"32","hashOfConfig":"25"},{"size":1183,"mtime":1609013894283,"results":"33","hashOfConfig":"25"},{"size":548,"mtime":1609236001694,"results":"34","hashOfConfig":"25"},{"size":1382,"mtime":1609053172896,"results":"35","hashOfConfig":"25"},{"size":629,"mtime":1609013775964,"results":"36","hashOfConfig":"25"},{"size":1124,"mtime":1609013126977,"results":"37","hashOfConfig":"25"},{"size":576,"mtime":1609238668284,"results":"38","hashOfConfig":"25"},{"size":514,"mtime":1609251717053,"results":"39","hashOfConfig":"25"},{"size":7028,"mtime":1609252795385,"results":"40","hashOfConfig":"25"},{"size":5924,"mtime":1609238746215,"results":"41","hashOfConfig":"25"},{"size":3980,"mtime":1609238725920,"results":"42","hashOfConfig":"25"},{"size":3137,"mtime":1609238828617,"results":"43","hashOfConfig":"25"},{"size":1492,"mtime":1609238748482,"results":"44","hashOfConfig":"25"},{"size":2203,"mtime":1609252408405,"results":"45","hashOfConfig":"25"},{"size":2376,"mtime":1609254345774,"results":"46","hashOfConfig":"25"},{"size":113,"mtime":1609254568908,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"ri3n4p",{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\express-project\\readers_club_react\\src\\index.js",[],["104","105"],"C:\\express-project\\readers_club_react\\src\\App.js",["106","107"],"C:\\express-project\\readers_club_react\\src\\components\\NavBar.jsx",[],"C:\\express-project\\readers_club_react\\src\\components\\auth\\Login.jsx",[],"C:\\express-project\\readers_club_react\\src\\components\\services\\UserService.jsx",["108","109"],"import jwtDecode from \"jwt-decode\";\r\nimport GenericService from \"./GenericService\";\r\n\r\nclass UserService extends GenericService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  login = (email, password) =>\r\n    new Promise((resolve, reject) => {\r\n      this.post(\"/users/login\", { email, password })\r\n        .then((token) => {\r\n          localStorage.setItem(\"token\", token);\r\n          resolve(token);\r\n        })\r\n        .catch((err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n\r\n  register = (name, email, password) =>\r\n    this.post(\"/users/register\", { name, email, password });\r\n  logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n  };\r\n\r\n  isLoggedIn = () => {\r\n    return localStorage.getItem(\"token\") ? true : false;\r\n  };\r\n\r\n  getLoggedInUser = () => {\r\n    try {\r\n      const jwt = localStorage.getItem(\"token\");\r\n      return jwtDecode(jwt);\r\n    } catch (ex) {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  isAdmin = () => {\r\n    if (this.isLoggedIn()) {\r\n      if (this.getLoggedInUser().role == \"admin\") return true;\r\n      else return false;\r\n    } else return false;\r\n  };\r\n}\r\nlet userService = new UserService();\r\nexport default userService;\r\n","C:\\express-project\\readers_club_react\\src\\components\\services\\GenericService.jsx",[],"C:\\express-project\\readers_club_react\\src\\components\\auth\\Register.jsx",[],"C:\\express-project\\readers_club_react\\src\\components\\LandingPage.jsx",[],"C:\\express-project\\readers_club_react\\src\\components\\imageSlider\\ImageSlider.jsx",["110"],"import React, { useState } from \"react\";\r\nimport { FaArrowAltCircleRight, FaArrowAltCircleLeft } from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ImageSlider = ({ slides }) => {\r\n  const [current, setCurrent] = useState(0);\r\n  const length = slides.length;\r\n\r\n  const nextSlide = () => {\r\n    setCurrent(current === length - 1 ? 0 : current + 1);\r\n  };\r\n\r\n  const prevSlide = () => {\r\n    setCurrent(current === 0 ? length - 1 : current - 1);\r\n  };\r\n\r\n  if (!Array.isArray(slides) || slides.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <section className=\"slider\">\r\n      <FaArrowAltCircleLeft className=\"left-arrow\" onClick={prevSlide} />\r\n      <FaArrowAltCircleRight className=\"right-arrow\" onClick={nextSlide} />\r\n\r\n      {slides.map((slide, index) => {\r\n        return (\r\n          <Link to=\"/\" key={index}>\r\n            <div className={index === current ? \"slide active\" : \"slide\"}>\r\n              {index === current && (\r\n                <img src={slide.image} alt=\"travel image\" className=\"image\" />\r\n              )}\r\n            </div>\r\n          </Link>\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ImageSlider;\r\n","C:\\express-project\\readers_club_react\\src\\components\\services\\NovelService.jsx",["111"],"import GenericService from \"./GenericService\";\r\n\r\nclass NovelService extends GenericService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  getNovel = () => this.get(\"/api/novels\");\r\n  getSingleNovel = (id) => this.get(\"/api/novels/\" + id);\r\n  addNovel = (formData, config) =>\r\n    this.postData(\"/api/novels\", formData, config);\r\n  deleteNovel = (_id) => this.delete(\"/api/novels/delete/\" + _id);\r\n  updateNovel = (_id, data) => this.put(\"/api/novels/update/\" + _id, data);\r\n}\r\n\r\nlet novelService = new NovelService();\r\nexport default novelService;\r\n","C:\\express-project\\readers_club_react\\src\\components\\imageSlider\\ItemsSlider.jsx",["112"],"import React from \"react\";\r\nimport Carousel from \"react-elastic-carousel\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst breakPoints = [\r\n  { width: 1, itemsToShow: 1 },\r\n  { width: 550, itemsToShow: 2, itemsToScroll: 2, pagination: false },\r\n  { width: 786, itemsToShow: 4 },\r\n  { width: 1200, itemsToShow: 6 },\r\n];\r\n\r\nconst ItemsSlider = (props) => {\r\n  const { items } = props;\r\n  console.log(props);\r\n  return (\r\n    <div>\r\n      <Carousel breakPoints={breakPoints}>\r\n        {items.map((novel, index) => {\r\n          return (\r\n            <div\r\n              style={{ textDecoration: \"none\", cursor: \"pointer\" }}\r\n              key={index}\r\n            >\r\n              <div>\r\n                <img\r\n                  onClick={(e) => {\r\n                    console.log(novel._id);\r\n                    props.history.push(\"/novels/\" + novel._id);\r\n                  }}\r\n                  height=\"310px\"\r\n                  className=\"image2\"\r\n                  src={novel.image}\r\n                />\r\n              </div>\r\n              <Chip\r\n                size=\"small\"\r\n                label={novel.genre}\r\n                style={{ backgroundColor: \"black\", color: \"white\" }}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </Carousel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(ItemsSlider);\r\n","C:\\express-project\\readers_club_react\\src\\components\\TextHeading.jsx",[],"C:\\express-project\\readers_club_react\\src\\components\\Footer.jsx",[],"C:\\express-project\\readers_club_react\\src\\components\\services\\ChapterService.jsx",["113"],"import GenericService from \"./GenericService\";\r\n\r\nclass ChapterService extends GenericService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  getChapter = () => this.get(\"/api/chapters\");\r\n  getSingleChapter = (id) => this.get(\"/api/chapters/\" + id);\r\n  addChapter = (formData, config) =>\r\n    this.postData(\"/api/chapters\", formData, config);\r\n  deleteChapter = (_id) => this.delete(\"/api/chapters/delete/\" + _id);\r\n  updateChapter = (_id, data) => this.put(\"/api/chapters/update/\" + _id, data);\r\n}\r\n\r\nlet chapterService = new ChapterService();\r\nexport default chapterService;\r\n","C:\\express-project\\readers_club_react\\src\\components\\services\\GenreService.jsx",["114"],"import GenericService from \"./GenericService\";\r\n\r\nclass GenreService extends GenericService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  getGenre = () => this.get(\"/api/genre\");\r\n  getSingleGenre = (name) => this.get(\"/api/genre/\" + name);\r\n  addGenre = (data) => this.post(\"/api/genre\", data);\r\n  deleteGenre = (_id) => this.delete(\"/api/genre/delete/\" + _id);\r\n  updateGenre = (_id, data) => this.put(\"/api/genre/update/\" + _id, data);\r\n}\r\n\r\nlet genreService = new GenreService();\r\nexport default genreService;\r\n","C:\\express-project\\readers_club_react\\src\\components\\readers_club\\stories\\SingleNovel.jsx",["115","116","117","118","119"],"C:\\express-project\\readers_club_react\\src\\components\\readers_club\\stories\\NewStory.jsx",["120","121","122","123"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Container, Grid, TextField } from \"@material-ui/core\";\r\nimport userService from \"../../services/UserService\";\r\nimport { toast } from \"react-toastify\";\r\nimport genreService from \"../../services/GenreService\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport novelService from \"../../services/NovelService\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"500px\",\r\n  },\r\n  child: {\r\n    width: \"600px\",\r\n  },\r\n}));\r\n\r\nconst NewStory = (props) => {\r\n  const classes = useStyles();\r\n  const [name, setName] = useState(\"\");\r\n  const [theme, setTheme] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [genre, setGenre] = useState([]);\r\n  const [selectedGenre, setSelectedGenre] = useState(\"\");\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [file, setFile] = useState(null);\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    genreService\r\n      .getGenre()\r\n      .then((data) => {\r\n        setGenre(data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n  console.log(selectedGenre);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(selectedGenre);\r\n    if (!selectedGenre == \"\") {\r\n      setLoader(true);\r\n      const formData = new FormData();\r\n      formData.append(\"name\", name);\r\n      formData.append(\"genre\", selectedGenre);\r\n      formData.append(\"theme\", theme);\r\n      formData.append(\"image\", file);\r\n      const config = {\r\n        headers: {\r\n          \"content-type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n\r\n      novelService\r\n        .addNovel(formData, config)\r\n        .then((data) => {\r\n          console.log(data);\r\n          setLoader(false);\r\n          props.history.push(\"/new/chapter/\" + data.novel._id);\r\n          console.log();\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      toast.error(\"Select Genre!\", {\r\n        position: toast.POSITION.TOP_CENTER,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {loader ? (\r\n        <Container maxWidth=\"lg\">\r\n          <Grid container spacing={3}>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"10%\",\r\n                marginBottom: \"20%\",\r\n              }}\r\n            >\r\n              <Loader\r\n                type=\"ThreeDots\"\r\n                color=\"#00BFFF\"\r\n                height={100}\r\n                width={100}\r\n                timeout={6000} //6 secs\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      ) : (\r\n        <div className={classes.child}>\r\n          <form onSubmit={handleSubmit}>\r\n            <TextField\r\n              label=\"title\"\r\n              fullWidth\r\n              required\r\n              value={name}\r\n              onChange={(e) => {\r\n                setName(e.target.value);\r\n              }}\r\n              placeholder=\"Give a name to your story\"\r\n            />{\" \"}\r\n            <br />\r\n            <Button\r\n              style={{ marginTop: \"10px\" }}\r\n              aria-controls=\"simple-menu\"\r\n              aria-haspopup=\"true\"\r\n              onClick={handleClick}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n            >\r\n              {selectedGenre ? selectedGenre : \"Choose genre\"}\r\n            </Button>\r\n            <Menu\r\n              id=\"simple-menu\"\r\n              anchorEl={anchorEl}\r\n              keepMounted\r\n              required\r\n              open={Boolean(anchorEl)}\r\n              onClose={handleClose}\r\n              fullWidth\r\n            >\r\n              {genre.map((item, index) => {\r\n                return (\r\n                  <div key={index}>\r\n                    <MenuItem\r\n                      required\r\n                      width=\"100%\"\r\n                      onClick={(e) => {\r\n                        setSelectedGenre(item.name);\r\n                        handleClose();\r\n                      }}\r\n                    >\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  </div>\r\n                );\r\n              })}\r\n            </Menu>\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Theme\"\r\n              required\r\n              multiline\r\n              rows={12}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              placeholder=\"Enter theme of your story\"\r\n              onChange={(e) => {\r\n                setTheme(e.target.value);\r\n              }}\r\n            />\r\n            <br />\r\n            <br />\r\n            <input\r\n              accept=\"image/*\"\r\n              name=\"image\"\r\n              className={classes.input}\r\n              id=\"contained-button-file\"\r\n              multiple\r\n              type=\"file\"\r\n              onChange={(e) => {\r\n                setFile(e.target.files[0]);\r\n              }}\r\n            />{\" \"}\r\n            <br />\r\n            <br />\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Add\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(NewStory);\r\n","C:\\express-project\\readers_club_react\\src\\components\\readers_club\\chapters\\NewChapter.jsx",["124"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Container, Grid, TextField } from \"@material-ui/core\";\r\nimport userService from \"../../services/UserService\";\r\nimport { toast } from \"react-toastify\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport chapterService from \"../../services/ChapterService\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"500px\",\r\n  },\r\n  child: {\r\n    width: \"600px\",\r\n  },\r\n}));\r\n\r\nconst NewChapter = (props) => {\r\n  const classes = useStyles();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [file, setFile] = useState(null);\r\n  const [loader, setLoader] = useState(false);\r\n  const id = props.match.params.id;\r\n\r\n  useEffect(() => {\r\n    toast.info(\"Add a new chapter\", {\r\n      position: toast.POSITION.TOP_CENTER,\r\n    });\r\n  }, []);\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setLoader(true);\r\n    const formData = new FormData();\r\n    formData.append(\"novel_id\", id);\r\n    formData.append(\"title\", title);\r\n    formData.append(\"content\", content);\r\n    formData.append(\"image\", file);\r\n    const config = {\r\n      headers: {\r\n        \"content-type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n\r\n    chapterService\r\n      .addChapter(formData, config)\r\n      .then((data) => {\r\n        console.log(data);\r\n        setLoader(false);\r\n        props.history.push(\"/novels/\" + id);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {loader ? (\r\n        <Container maxWidth=\"lg\">\r\n          <Grid container spacing={3}>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"10%\",\r\n                marginBottom: \"20%\",\r\n              }}\r\n            >\r\n              <Loader\r\n                type=\"ThreeDots\"\r\n                color=\"#00BFFF\"\r\n                height={100}\r\n                width={100}\r\n                timeout={6000} //6 secs\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      ) : (\r\n        <div className={classes.child}>\r\n          <form onSubmit={handleSubmit}>\r\n            <TextField\r\n              label=\"title\"\r\n              fullWidth\r\n              required\r\n              value={title}\r\n              onChange={(e) => {\r\n                setTitle(e.target.value);\r\n              }}\r\n              placeholder=\"Give a title of your Chapter\"\r\n            />{\" \"}\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Content\"\r\n              required\r\n              multiline\r\n              rows={12}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              placeholder=\"Enter content of your chapter\"\r\n              onChange={(e) => {\r\n                setContent(e.target.value);\r\n              }}\r\n            />\r\n            <br />\r\n            <br />\r\n            <input\r\n              accept=\"image/*\"\r\n              name=\"image\"\r\n              className={classes.input}\r\n              id=\"contained-button-file\"\r\n              multiple\r\n              type=\"file\"\r\n              onChange={(e) => {\r\n                setFile(e.target.files[0]);\r\n              }}\r\n            />{\" \"}\r\n            <br />\r\n            <br />\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Add\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(NewChapter);\r\n","C:\\express-project\\readers_club_react\\src\\components\\readers_club\\chapters\\SingleChapter.jsx",["125","126"],"import { Container, Divider, Grid, Typography } from \"@material-ui/core\";\r\nimport chapterService from \"../../services/ChapterService\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst SingleChapter = (props) => {\r\n  const id = props.match.params.id;\r\n  const [chapter, setChapter] = useState([]);\r\n  const [loader, setLoader] = useState(true);\r\n\r\n  useEffect(() => {\r\n    chapterService\r\n      .getSingleChapter(id)\r\n      .then((data) => {\r\n        setChapter(data.chapter);\r\n        setLoader(false);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {loader ? (\r\n        <Container maxWidth=\"lg\">\r\n          <Grid container spacing={3}>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"10%\",\r\n                marginBottom: \"20%\",\r\n              }}\r\n            >\r\n              <Loader\r\n                type=\"ThreeDots\"\r\n                color=\"#00BFFF\"\r\n                height={100}\r\n                width={100}\r\n                timeout={6000} //6 secs\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      ) : (\r\n        <>\r\n          <Grid container spacing={3} style={{ marginTop: \"30px\" }}>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                filter: \"brightness(20%)\",\r\n                opacity: \"0.9\",\r\n              }}\r\n            >\r\n              <img\r\n                className=\"image3\"\r\n                width=\"1280px\"\r\n                height=\"400px\"\r\n                src={chapter.image}\r\n                alt=\"\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Typography\r\n                variant=\"h3\"\r\n                component=\"h4\"\r\n                style={{\r\n                  position: \"absolute\",\r\n                  textAlign: \"center\",\r\n                  bottom: \"30%\",\r\n                  width: \"100%\",\r\n                  color: \"whitesmoke\",\r\n\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                {chapter.title}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Container\r\n            maxWidth=\"lg\"\r\n            className=\"shadow\"\r\n            style={{\r\n              marginTop: \"40px\",\r\n              padding: \"30px\",\r\n            }}\r\n          >\r\n            <Typography\r\n              variant=\"h4\"\r\n              component=\"h3\"\r\n              style={{ lineHeight: 1.8, fontSize: \"25px\" }}\r\n            >\r\n              {chapter.content}\r\n            </Typography>\r\n          </Container>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleChapter;\r\n","C:\\express-project\\readers_club_react\\src\\components\\readers_club\\chapters\\Chapters.jsx",[],"C:\\express-project\\readers_club_react\\src\\components\\readers_club\\genres\\Genre.jsx",[],"C:\\express-project\\readers_club_react\\src\\components\\readers_club\\genres\\GenreSpecificStory.jsx",["127","128","129"],"C:\\express-project\\readers_club_react\\src\\components\\readers_club\\libraries\\Library.jsx",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":4,"column":3,"nodeType":"136","messageId":"137","endLine":4,"endColumn":11},{"ruleId":"134","severity":1,"message":"138","line":9,"column":26,"nodeType":"136","messageId":"137","endLine":9,"endColumn":31},{"ruleId":"139","severity":1,"message":"140","line":5,"column":3,"nodeType":"141","messageId":"142","endLine":7,"endColumn":4},{"ruleId":"143","severity":1,"message":"144","line":42,"column":39,"nodeType":"145","messageId":"146","endLine":42,"endColumn":41},{"ruleId":"147","severity":1,"message":"148","line":31,"column":17,"nodeType":"149","endLine":31,"endColumn":79},{"ruleId":"139","severity":1,"message":"140","line":4,"column":3,"nodeType":"141","messageId":"142","endLine":6,"endColumn":4},{"ruleId":"150","severity":1,"message":"151","line":26,"column":17,"nodeType":"149","endLine":34,"endColumn":19},{"ruleId":"139","severity":1,"message":"140","line":4,"column":3,"nodeType":"141","messageId":"142","endLine":6,"endColumn":4},{"ruleId":"139","severity":1,"message":"140","line":4,"column":3,"nodeType":"141","messageId":"142","endLine":6,"endColumn":4},{"ruleId":"152","severity":1,"message":"153","line":38,"column":6,"nodeType":"154","endLine":38,"endColumn":8,"suggestions":"155"},{"ruleId":"143","severity":1,"message":"144","line":100,"column":35,"nodeType":"145","messageId":"146","endLine":100,"endColumn":37},{"ruleId":"143","severity":1,"message":"144","line":124,"column":34,"nodeType":"145","messageId":"146","endLine":124,"endColumn":36},{"ruleId":"143","severity":1,"message":"144","line":144,"column":32,"nodeType":"145","messageId":"146","endLine":144,"endColumn":34},{"ruleId":"143","severity":1,"message":"144","line":187,"column":29,"nodeType":"145","messageId":"146","endLine":187,"endColumn":31},{"ruleId":"134","severity":1,"message":"156","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":19},{"ruleId":"134","severity":1,"message":"157","line":31,"column":10,"nodeType":"136","messageId":"137","endLine":31,"endColumn":18},{"ruleId":"134","severity":1,"message":"158","line":31,"column":20,"nodeType":"136","messageId":"137","endLine":31,"endColumn":31},{"ruleId":"143","severity":1,"message":"144","line":59,"column":24,"nodeType":"145","messageId":"146","endLine":59,"endColumn":26},{"ruleId":"134","severity":1,"message":"156","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":19},{"ruleId":"134","severity":1,"message":"159","line":1,"column":21,"nodeType":"136","messageId":"137","endLine":1,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":22,"column":6,"nodeType":"154","endLine":22,"endColumn":8,"suggestions":"160"},{"ruleId":"134","severity":1,"message":"161","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":19},{"ruleId":"134","severity":1,"message":"162","line":9,"column":8,"nodeType":"136","messageId":"137","endLine":9,"endColumn":14},{"ruleId":"152","severity":1,"message":"163","line":40,"column":6,"nodeType":"154","endLine":40,"endColumn":8,"suggestions":"164"},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'toast' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["167"],"'userService' is defined but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'Divider' is defined but never used.",["168"],"'CardActions' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'genre'. Either include it or remove the dependency array.",["169"],"no-global-assign","no-unsafe-negation",{"desc":"170","fix":"171"},{"desc":"170","fix":"172"},{"desc":"173","fix":"174"},"Update the dependencies array to be: [id]",{"range":"175","text":"176"},{"range":"177","text":"176"},"Update the dependencies array to be: [genre]",{"range":"178","text":"179"},[1139,1141],"[id]",[712,714],[1264,1266],"[genre]"]